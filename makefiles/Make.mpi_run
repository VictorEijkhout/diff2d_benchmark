# -*- makefile -*-
################################################################
####
#### This makefile is part of `Parallel Programming in MPI and OpenMP'
#### by Victor Eijkhout, copyright 2013-2023
#### eijkhout@tacc.utexas.edu
####
#### Make include file for MPI programs
####
#### https://apple.stackexchange.com/questions/3271/how-to-get-rid-of-firewall-accept-incoming-connections-dialog
####
#### sudo codesign --force --deep --sign - /path/to/application.app
#### (possibly without the "--deep"
####
################################################################

info ::
	@echo && echo "================================ MPI run:"

ifeq "${TACC_SYSTEM}" "macbookair"
  MPIRUN=mpiexec
  NPOPTION=-n
else
  MPIRUN=ibrun
  NPOPTION=-np
endif
NP_default = 4
SCRIPTSDIR = ../../../scripts

.PHONY: mpirun catchrun
info ::
	@echo "make mpirun / slurmrun / catchrun"
	@echo "    ( catchrun gives orderly output)"
	@echo "    [ PROGRAM=... NP=... ]"
	@echo "    [ ENVOPTIONS=... stuff before mpiexec ]"
	@if [ "${LANGUAGE}" = "python" ] ; then \
	    if [ -z "${PYTHON}"  ] ; then \
	        echo "    please set PYTHON variable" \
	    ; else \
	        echo "    [ PYTHON=... (default: $$( which ${PYTHON} ) ) ]" \
	    ; fi \
	fi
mpi_nprocs :
	@if [ ! -z "${np_${PROGRAM}}" ] ; then \
	        echo ${np_${PROGRAM}} \
	; elif [ ! -z "${NP}" ] ; then \
	        echo ${NP} \
	; elif [ ! -z "${SLURM_NPROCS}" ] ; then \
	        echo ${SLURM_NPROCS} \
	; else \
	        echo ${NP_default} \
	; fi
proginvocation :
	@program=${PROGRAM} \
	 && if [ "${LANGUAGE}" = "python" ] ; then \
	      program=$${program%%.py}.py ; fi\
	 && if [ ! -f "$${program}" ] ; then \
	      echo "Could not find program: $${program}" && exit 1 ; fi \
	 && if [ "${LANGUAGE}" = "python" -a -z "${CATCHER}" ] ; then \
	      progargs="${PYTHON} $$progargs" \
	    ; else \
	      progargs=$${program} ; fi \
	 && if [ ! -z "${RUN_OPTIONS}" ] ; then \
	      progargs="$${progargs} ${RUN_OPTIONS}" ; fi \
	 && if [ ! -z "${CATCHER}" ] ; then \
	      catcher=${CATCHER} \
	       && if [ "${LANGUAGE}" = "P" ] ; then \
	            catcher="$${catcher} -p ${PYTHON}" ; fi \
	       && progargs="$${catcher} $${progargs}" \
	    ; fi \
	 && echo "$${progargs}"
mpirun :
	@program=${PROGRAM} \
	 && if [ ! -z "${RUNNER}" ] ; then \
	      progargs="${RUNNER} $${progargs}" ; fi \
	 && np=$$( make --no-print-directory mpi_nprocs \
	                PROGRAM=${PROGRAM} NP=${NP} NPMULT=${NPMULT} ) \
	 && invoke=$$( make --no-print-directory proginvocation \
	                PROGRAM="${PROGRAM}" \
	                LANGUAGE="${LANGUAGE}" OPTIONS="${OPTIONS}" PYTHON="${PYTHON}" \
	                CATCHER="${CATCHER}" \
	            ) \
	 && cmdline="${ENVOPTIONS} ${MPIRUN} ${NPOPTION} $$np $${invoke}" \
	 && if [ "${ECHO}" = "1" ] ; then \
	        echo $$cmdline ; fi \
	 && eval $$cmdline \
	 && echo >/dev/null
slurmrun :
	${ENVOPTIONS} ${MPIRUN} -np ${SLURM_NPROCS} ${PYTHON} ${PROGRAM}${PROGRAM_EXTENSION} ${OPTIONS}
catchrun :
	@catcher=${SCRIPTSDIR}/catchout
	 && if [ ! -f "$${catcher}" ] ; then \
	    echo "Can not find catcher script: <<${catcher}>>" \
	     && exit 1 ; fi \
	 && make --no-print-directory mpirun \
	        PROGRAM=${PROGRAM} OPTIONS="${OPTIONS}" \
	        PYTHON="${PYTHON}" LANGUAGE="${LANGUAGE}" \
	        ECHO=${ECHO} CATCHER="${CATCHER}" \
	 && for i in `seq 0 $$(( NP-1 ))` ; do \
	      cat ${PROGRAM}.out$$i \
	        ${CATCHFILTER} \
	    ; done > ${PROGRAM}.outall \
	 && cat ${PROGRAM}.outall
clean ::
	@rm -f *.outall

info ::
	@echo && echo "================ Scaling"
	@echo "make mpi_scaling"
	@echo "    [ NDIV= (default: ${NDIV})] [ NPLOW= (default: ${NPLOW}) ]"
	@echo "    [ SCALETAG= (default: ${SCALETAG})]"
mpi_scaling :
	@export np=$$( make --no-print-directory mpi_nprocs ) \
	 && export mpiprocs="$$( make --no-print-directory mpi_procs \
	                         NP=$$np NPLOW=${NPLOW} NPMULTI=${NPMULT} )" \
	 && if [ -z "${PROGRAM}" ] ; then \
	        echo "Set PROGRAM variable" && exit 1 \
	    ; fi \
	 && results=${PROGRAM}-scaling${SCALETAG}.runout \
	 && ( \
	    for t in $$mpiprocs ; do \
	        ppn=$$(( $$t / ${SLURM_NNODES} )) \
	         && echo "Procs: $$t ppn=$$ppn" \
	         && make --no-print-directory mpirun ECHO=${ECHO} \
	                NP=$$t PROGRAM=${PROGRAM} \
	                ENVOPTIONS="IBRUN_TASKS_PER_NODE=$$ppn" \
	         && echo \
	    ; done \
	    ) | tee $$results
.PHONY: mpi_procs
mpi_procs :
	@if [ ! -z "${MPIPROCS}" ] ; then \
	    echo "${MPIPROCS}" \
	    ; \
	else \
	    if [ ! -z "${NDIV}" ] ; then ndiv=${NDIV} ; else ndiv=3 ; fi \
	     && if [ -z "${NPLOW}" ] ; then nplow=1 ; else nplow=${NPLOW} ; fi \
	     && if [ -z "${NPMULT}" ] ; then npmult=1 ; else npmult=${NPMULT} ; fi \
	     && if [ -z ${NP} ] ; then \
	            np=$$( make --no-print-directory mpi_nprocs ) \
	        ; else np=${NP} ; fi \
	     && div=`seq 1 $$ndiv` \
	     && frac=$$( for d in $$div ; do \
	                    p=$$(( $$d * $${np} / $$ndiv )) \
	                     && p=$$(( ( $$p/$$npmult ) * $$npmult )) \
	                     && echo "$$p" \
	                 ; done ) \
	     && echo "$$nplow $$frac" \
	    ; \
	fi
.PHONY: scaling_logname
scaling_logname :
	@if [ ! -z "${RUNOUTID}" ] ; then \
	  echo ${PROGRAM}-scaling-${RUNOUTID}.out \
	; else \
	  echo ${PROGRAM}-scaling.out \
	; fi


info ::
	@echo && echo "================ Output and regression "
	@echo "make runs : compile and run everything"
	@echo "make runouts :same, and generate output files"
	@echo "    RUNS=${RUNS}"
	@echo "    [ RUNOUTID= .... (extra id, default blank) ]"
	@echo "    [ NP= .... (default=${NP}) ]"
	@echo "    [ MPIRUN= .... (default=${MPIRUN}) ]"
	@echo "    ( make totalclean removes *.runout )"
	@echo "make run_generic PROGRAM=... : compile and default run"
	@echo "    [ RUNOUT=0/1 ]"
.PHONY: runs runouts run_generic
run_generic :
	@if [ -z "${PROGRAM}" ] ; then \
	    echo "please specify PROGRAM variable" && exit 1 ; fi 
	@if [ ! "${LANGUAGE}" = "python" ] ; then \
	    make --no-print-directory \
	            ENVOPTIONS=${ENVOPTIONS} NP=${NP} PYTHON=${PYTHON} \
	            PROGRAM_EXTENSION=${PROGRAM_EXTENSION} OPTIONS=${OPTIONS} \
	        ${PROGRAM} \
	    ; fi \
	 && program=${PROGRAM} \
	 && make --no-print-directory mpirun \
	            ECHO=${ECHO} MPIRUN=${MPIRUN} OPTIONS=${OPTIONS} \
	            NP=${NP} PYTHON=${PYTHON} PROGRAM_EXTENSION=${PROGRAM_EXTENSION} \
	            PROGRAM=$${program}
runs :
	@logfile=allruns.out \
	 && for r in ${RUNS} ; do \
	    echo "---------------- Test run: $$r ----------------" \
	     && runname=$${r##run_} \
	     && make --no-print-directory \
	            $$r \
	            ENVOPTIONS=${ENVOPTIONS} NP=${NP} PYTHON=${PYTHON} \
	            PROGRAM_EXTENSION=${PROGRAM_EXTENSION} OPTIONS=${OPTIONS} \
	     ; \
	 done \
	 2>&1 | tee $$logfile \
	 && echo && echo "See $$logfile for full log" && echo
runouts :
	@for r in ${RUNS} ; do \
	    echo "---------------- Test run: $$r ----------------" \
	     && runname=$${r##run_} \
	     && runout=$${runname}${RUNOUTID}.runout \
	     && make --no-print-directory \
	            $$r \
	            ENVOPTIONS=${ENVOPTIONS} NP=${NP} PYTHON=${PYTHON} \
	            PROGRAM_EXTENSION=${PROGRAM_EXTENSION} OPTIONS=${OPTIONS} \
	            RUNOUT=1 \
	        | grep -v TACC: | grep -v "up to date" > $${runout} 2>/dev/null \
	     && echo "see output in $${runout}" && cat $${runout} \
	     && git add $${runout} \
	    ; \
	 done
clean ::
	@rm -f *.out[0-9]*
total_clean totalclean ::
	@rm -f *.runout
