# -*- makefile -*-
################################################################
####
#### This makefile is part of the course
#### Introduction to Scientific Programming in C++ and Fortran
#### by Victor Eijkhout (eijkhout@tacc.utexas.edu)
#### copyright 2017-2025 Victor Eijkhout
####
#### Make.snippets : extracting stuff from stuff
####
################################################################

####
#### Extract code to snippet directory
####
info ::
	@echo "================ Snippet support rules"
	@echo "make frames : snippets onepass extract_stuff"
.PHONY: frames
frames :
	make snippets onepass extract_exercises extract_slides
info ::
	@echo "make snippets : from code, leave in snippets.code"
.PHONY: snippets
snippets :
	@echo "extracting code snippets in <<${SNIPPETSSOURCES}>>" \
	 && snippetsdir=$$( pwd )/snippets.code \
	 && echo " .. extracting snippets into $${snippetsdir}" \
	 && mkdir -p $$snippetsdir \
	 && logfile=snippets.log && rm -f $$logfile $$ touch "$${logfile}" \
	 && echo " .. see $$logfile afterwards" \
	 && for d in ${SNIPPETSSOURCES} ; do \
	      if [ ! -z "${SNIPPETSOURCESROOT}" ] ; then d="${SNIPPETSOURCESROOT}/$${d}" ; fi \
	       && if [ -d "$$d" ] ; then \
	            cmdline="make --no-print-directory snippets_extract \
	                        SNIPPETSSOURCE=$$d SNIPPETSDIR=$${snippetsdir}" \
	             && echo " .. $$cmdline" && eval $$cmdline \
	          ; else \
	            echo " .. no such dir: <<$$d>>" \
	          ; fi \
	    ; done >>$$logfile 2>&1 \
	 && for d in ${SNIPPETSSOURCESGO} ; do \
	      if [ -d "$$d" ] ; then \
	        ( pushd "$$d" \
	         && cmdline="make --no-print-directory snippets_extract \
	            SNIPPETSDIR=$${snippetsdir}" \
	         && echo " .. $$cmdline" && eval $$cmdline \
	        ) \
	      ; else \
	        echo " .. no such dir: <<$$d>>" \
	      ; fi \
	    ; done >>$$logfile 2>&1 \
	 && echo "   (any errors are in snippets.log)" \
	 && echo ".. sanitizing white space for examples" \
	 && ( cd $$snippetsdir \
	        && for s in `ls` ; do \
	             if [ ! -z "${SCRIPTSDIR}" ] ; then \
	               python "../${SCRIPTSDIR}/cutspace.py" $$s \
	             ; else \
	               python ../scripts/cutspace.py $$s \
	             ; fi \
	           ; done \
	     ) \
	  && echo ".. extracted"

.PHONY: snippets_extract
snippets_extract ::
	@if [ -z "${SNIPPETSDIR}" ] ; then \
	    echo "Please set variable SNIPPETSDIR" && exit 1 ; fi
	@if [ -z "${SNIPPETSSOURCE}" ] ; then \
	    echo "Please set variable SNIPPETSSOURCE" && exit 1 ; fi
	@if [ ! -d "${SNIPPETSSOURCE}" ] ; then \
	    echo "Does not exist: purported snippets source ${SNIPPETSSOURCE}" && exit 1 ; fi
	@cd ${SNIPPETSSOURCE} \
	 && export sourcedir=$$( pwd ) \
	 && echo "In: $${sourcedir}, extracting to <<${SNIPPETSDIR}>>" \
	 && language=$$( cd $${sourcedir} \
	                 && make --no-print-directory language 2>/dev/null || echo CXX ) \
	 && export sourcedir=$${sourcedir##*code/} \
	 && if [ "$${language}" = "CXX" ] ; then \
	      extension=cpp \
	    ; elif [  "$${language}" = "C" ] ; then \
	      extension=c \
	    ; elif [  "$${language}" = "F" ] ; then \
	      extension=F90 \
	    ; elif [ "$${language}" = "bash" ] ; then \
	      extension=sh \
	    ; fi \
	 && for extension in c cpp cxx F90 h hpp sh ; do \
	    echo " .. files with extension <<$${extension}>> in $${sourcedir}" \
	     && for c in $$( ls Makefile *.$${extension} *.h *.hpp 2>/dev/null ) ; do \
	          echo ".. .. parsing $$c in $$sourcedir" \
	           && awk -v fn=$${c##*/} -v td=${SNIPPETSDIR} -v sd=$$sourcedir \
	            'BEGIN { printing=0; firsttime=0; file="foo"; files["x"]="y" } \
	             /snippet end/  { printing=0; firsttime=0 } \
	             printing==1 && firsttime==1 { print "// " sd "/" fn > file } \
	             printing==1 && !/snipexclude/ { print $$0 > file; firsttime=0 } \
	             /snippet /  && !/snippet end/ { \
	                printing=1; file=td "/" $$2 ; \
	                print "writing snippet file " file " into " td; \
	  		if ( $$2 in files ) \
	                    { print "    continuing file " $$2 ; \
	                        print "    /* ... */" > file ; firsttime=0 } \
	                else \
	                    { print "    marking new file " $$2 ; \
	                        files[$$2]=1 ; firsttime=1 } \
	            } \
	             /snippetcont /  && !/snippet end/ { \
	                printing=1; file=td "/" $$2; \
	                print "writing snippet file " file; \
	  		if ( $$2 in files ) \
	                    { print "    continuing file " $$2 ; \
	                        print "    /* ... */" > file ; firsttime=0 } \
	                else \
	                    { print "    marking new file " $$2 ; \
	                        files[$$2]=1 ; firsttime=0 } \
	            } \
	            ' $$c \
	        ; done \
	    ; done


info ::
	@echo "make extract_exercises : rename exercises using label as name"
	@echo "    [ VERBOSE= (nonzero for output) ]"
.PHONY: extract_exercises
extract_exercises :
	@echo "labeling exercises" && \
	 cd exercises && \
	  for e in *-ex[0-9]*.tex *-rev[0-9]* ; do \
	    if [ `cat $$e | grep label | wc -l` -eq 1 ] ; then \
	      export labelname=`cat $$e | grep label | sed -e s/^.*label.// -e s/\}//` ; \
	      if [ ! -z "${VERBOSE}" ] ; then \
	        echo "Copy $$e to $$labelname.tex" ; \
	      fi ; \
	      cp $$e $$labelname.tex ; \
	      export answername=`echo $$e | sed s/-ex/-an/` ; \
	      export labelname=`echo $$labelname | sed s/ex:/an:/` ; \
	      if [ -e ../answers/$$answername ] ; then \
	        if [ ! -z "${VERBOSE}" ] ; then \
	          echo "Copy $$answername to $$labelname.tex" ; \
	        fi ; \
	        ( cd ../answers ; cp $$answername $$labelname.tex ) ; \
	      fi ; \
	    fi ; \
	  done

info ::
	@echo "make extract_slides"
.PHONY: extract_slides 
extract_slides :
	@echo "labeling slides" \
	 && cd frames \
	 && for e in *.tex ; do \
	        if [ `cat $$e | grep '\\label' | wc -l` -gt 0 ] ; then \
	          export nam=`cat $$e | grep '\\label' | head -n 1 \
	                      | sed -e 's/^.*\\label{//' -e 's/\}//' ` \
	           && if [ ! -z "${VERBOSE}" ] ; then echo "  $$e -> $$nam" ; fi \
	           && if [ $$e != $$nam.tex ] ; then \
	                cp $$e $$nam.tex \
	              ; fi \
	        ; fi \
	    ; done

nocut :
	/bin/true \
	           /answersnippet/  && $$2 in files \
	                { print "  /* ... */" > file ; printf(".. .. .. %s\n",file) } \
	           /codesnippet/    && $$2 in files \
	                { print "  /* ... */" > file ; printf(".. .. .. %s\n",file) } \
	           /examplesnippet/ && $$2 in files \
	                { print "  /* ... */" > file ; printf(".. .. .. %s\n",file) } \
	continue
# extra awk clause for listing file name: f==1 && ff==0 {print "// " fn > file; ff=1}
