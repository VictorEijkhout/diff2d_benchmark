/****************************************************************
 ****
 **** This file belongs with the course
 **** Introduction to Scientific Programming in C++/Fortran2003
 **** copyright 2019-2023 Victor Eijkhout eijkhout@tacc.utexas.edu
 ****
 **** linalg.cpp : bordered vector routines for omp
 ****
 ****************************************************************/

#include <cmath>
#include <algorithm>
using std::for_each;
#include <string>
using std::string;

#include <fmt/format.h>
using fmt::print;

#include "../linalg.hpp"

namespace linalg {

  //! The constructor copies arguments and allocates the data
  template< typename real >
  bordered_array<real>::bordered_array( size_t m,size_t n,int border )
    : _m(m),_n(n),border(border)
    , std::vector<real>((m+2*border)*(n*2*border)) {}

  //! Compute the 5-point Laplace stencil from an input array
  //codesnippet d2d5ptcxx
  template< typename real >
  void bordered_array<real>::central_difference_from
      ( linalg::bordered_array<real> other,bool trace ) {
    auto out = this->data();
    auto in = other.data();
    for ( int i=0; i<_m; i++ ) {
      for ( int j=0; j<_n; j++ ) {
	out[ iindex(i,j) ] = 4*in[ iindex(i,j) ] - in[ iindex(i-1,j) ] - in[ iindex(i+1,j) ] - in[ iindex(i,j-1) ] - in[ iindex(i,j+1) ];
      }
    }
  };
  //codesnippet end

  //! Copy the interior of another bordered array, but leave border alone
  //codesnippet d2dcopycxx
  template< typename real >
  void bordered_array<real>::copy_interior_from( linalg::bordered_array<real> other ) {
    auto out = this->data();
    auto in = other.data();
    for ( int i=0; i<_m; i++ )
      for ( int j=0; j<_n; j++ ) {
	out[ iindex(i,j) ] = in[ iindex(i,j) ];
      }
  };
  //codesnippet end

  //! Scale the interior, leaving the border alone
  //codesnippet d2dscalecxx
  template< typename real >
  void bordered_array<real>::scale_interior( real factor ) {
    auto out = this->data();
    for ( int i=0; i<_m; i++ )
      for ( int j=0; j<_n; j++ )
	out[ iindex(i,j) ] *= factor;
  };
  //codesnippet end

  //! Compute the L2 norm of the interior
  //codesnippet d2dnormcxx
  template< typename real >
  real bordered_array<real>::l2norm() {
    real sum_of_squares{0};
    auto out = this->data();
    for ( int i=0; i<_m; i++ )
      for ( int j=0; j<_n; j++ ) {
	auto v = out[ iindex(i,j) ];
	sum_of_squares += v*v;
      }
    return std::sqrt(sum_of_squares);
  };
  //codesnippet end

  //! Set the interior to a value
  template< typename real >
  void bordered_array<real>::set( real value, bool trace ) {
    auto out = this->data();
    for ( int i=0; i<_m; i++ )
      for ( int j=0; j<_n; j++ )
        out[ iindex(i,j) ] = value;
  };

  template< typename real >
  void bordered_array<real>::set_bc( bool down,bool right, bool trace ) {
    auto out = this->data();
    for ( int i=0; i<_m; i++ )
      for ( int j=0; j<_n; j++ )
	if ( i==_m-1 or j==_n-1 )
	  out[ iindex(i,j) ] = 1.;
  };

  template< typename real >
  void bordered_array<real>::view( string caption ) {
    if (caption!="")
      print("{}:\n",caption);
    auto out = this->data();
    for ( int i=0; i<_m; i++ )
      for ( int j=0; j<_n; j++ ) {
	char c = ( j<_n+2*border-1 ? ' ' : '\n' );
	print("{:5.2}{}",out[ iindex(i,j) ],c);
      }
  };
};

namespace linalg {
  template class bordered_array<float>;
  template class bordered_array<double>;
};
