# -*- makefile -*-
################################################################
################################################################
####
#### This makefile is part of the source of 
#### "Parallel Computing for Science and Engineering"
#### by Victor Eijkhout, copyright 2013-2024
####
#### make include file for diff2d profiling
####
################################################################
################################################################

info ::
	@echo "================ profiling"
	@echo "set PROF=1 for compiling for gprof"
ifeq "${PROF}" "1"
  EXTRA_OPTIONS = -pg
  EXTRA_LINK_FLAGS = -pg
endif

##
## gprof
##
info ::
	@echo "make profile : analyze gprof output"
.PHONY: profile
profile :
	gprof -l diff2d gmon.out > diff2d.prof
clean ::
	@rm -f gmon.out diff2d.prof

##
## perf
##
info ::
	@echo "make perf : analyze output of perf record"
	@echo "    [ PERF_OPTIONS=... ]"
.PHONY: perf
PERFDATA = perf.data
perf :
	@if [ ! -f "${PERFDATA}" ] ; then \
	    echo "No data file ${PERFDATA} found; first: perf record yourprogram" \
	     && exit 1 ; fi
	@perf annotate 
	@perf report --input="${PERFDATA}" --stdio --percent-limit=1 \
	    --fields=Overhead,Symbol ${PERF_OPTIONS} \
	    2>/dev/null \
	 && echo
clean ::
	@rm -f perf.data*

##
## VTUNE profiling
## here we loop over models,
## do profiling on each
##
info ::
	@echo "================ Profiling"
	@echo "run_vtune : vtune on variants"
	@echo "    [ NSIZE=123456 (default: ${NSIZE}) ]"
	@echo "    [ NORUN= (nonzero for redisplay of vtune output) ]"
NORUN =
.PHONY: run_vtune
##
## generation
##
run_vtune :
	@for v in ${VARIANTS} ; do \
	  vtunedata=vtune_$${v}_${TACC_FAMILY_COMPILER}.vt \
	   && if [ -z "${NORUN}" ] ; then \
	        rm -rf bin/$${v} $${vtunedata} \
	         && make --no-print-directory cmake VARIANTS=$${v} ECHO=${ECHO} \
	         && cmdline="vtune -collect hotspots --result-dir=$${vtunedata} \
	                bin/$${v} -m ${NSIZE} -n ${NSIZE} -i 5 -t" \
	         && echo && echo  "Vtune collect: $$cmdline" && echo \
	         && eval $$cmdline \
	      ; fi \
	   && echo && echo "Displaying vtune results for $${v}" && echo \
	   && make --no-print-directory analyze_vtune VTUNEDATA=$${vtunedata} \
	   && make --no-print-directory display_vtune VTUNEDATA=$${vtunedata} \
	; done
localclean ::
	@rm -rf *.vt
##
## analysis
##

## Available columns:
## Function,CPU Time,CPU Time:Effective Time,CPU Time:Spin Time,CPU Time:Spin Time:Imbalance or Serial Spinning,CPU Time:Spin Time:Lock Contention,CPU Time:Spin Time:Other,CPU Time:Overhead Time,CPU Time:Overhead Time:Creation,CPU Time:Overhead Time:Scheduling,CPU Time:Overhead Time:Reduction,CPU Time:Overhead Time:Atomics,CPU Time:Overhead Time:Other,Function (Full)
.PHONY: analyze_vtune
VTUNEDATA = r000hs
analyze_vtune :
	@if [ ! -d "${VTUNEDATA}" ] ; then \
	    echo "No data folder ${VTUNEDATA} found; first: vtune record yourprogram" \
	     && exit 1 ; fi
	@vtune -report hotspots -result-dir ${VTUNEDATA} -report-output=${VTUNEDATA}.out \
	    -report-knob show-issues=false \
	    -format csv -csv-delimiter tab \
	    -column "Function,CPU Time:Effective"
display_vtune :
	@if [ ! -f "${VTUNEDATA}.out" ] ; then \
	    echo "No data file ${VTUNEDATA}.out found; first: vtune record yourprogram" \
	     && exit 1 ; fi
	@t=$$( cat ${VTUNEDATA}.out \
	 | awk --field-separator="\t" \
	                '{ t=t+$$2; \
	                  } \
	                 END {print t} \
	                ' \
	    2>/dev/null ) \
	 && cat ${VTUNEDATA}.out \
	 | awk --field-separator="\t" -v time=$$t \
	                '{ printf("%60s %7.5f\n", $$1 , 100*$$2/time); \
	                  } \
	                ' \
	    2>/dev/null \
	 && echo
localclean ::
	@rm -f *.vt.out
