template< typename real >
void bordered_array_1d<real>::central_difference_from
    ( const linalg::bordered_array_base<real>& _other,bool trace ) {
// upcast base to derived type
  const auto& other = dynamic_cast<const linalg::bordered_array_1d<real>&>(_other);
  auto out = this->data();
  auto in = other.data();
  auto m = this->m(), n = this->n();
  auto b = this->border();
  #pragma omp parallel for
  for ( idxint i=0; i<m; i++ ) {
    for ( idxint j=0; j<n; j++ ) {
      out[ IINDEX(i,j,m,n,b) ] = 4*in[ IINDEX(i,j,m,n,b) ]
        - in[ IINDEX(i-1,j,m,n,b) ] - in[ IINDEX(i+1,j,m,n,b) ]
        - in[ IINDEX(i,j-1,m,n,b) ] - in[ IINDEX(i,j+1,m,n,b) ];
    }
  }
